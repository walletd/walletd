use async_trait::async_trait;
use candid::{CandidType, Principal, decode_args};
use candid::utils::ArgumentEncoder;
use ed25519_dalek::{SigningKey, Signer};
use ic_cdk::call::Call;
use rand::{rngs::OsRng, RngCore};
use serde::{Deserialize, Serialize};
use std::collections::BTreeMap;
use std::fmt;
use zeroize::Zeroize;

// Custom error type
#[derive(Debug)]
pub enum IcpWalletError {
    WalletNotFound,
    InsufficientFunds,
    Custom(String),
}

impl fmt::Display for IcpWalletError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            IcpWalletError::WalletNotFound => write!(f, "Wallet not found"),
            IcpWalletError::InsufficientFunds => write!(f, "Insufficient funds"),
            IcpWalletError::Custom(msg) => write!(f, "Error: {}", msg),
        }
    }
}

impl std::error::Error for IcpWalletError {}

// Custom transaction trait
pub trait IcpTransactionTrait {
    fn from_address(&self) -> String;
    fn to_address(&self) -> String;
    fn amount(&self) -> u64;
}

// ICP transaction
#[derive(CandidType, Serialize, Deserialize, Clone)]
pub struct IcpTransaction {
    from: Principal,
    to: Principal,
    amount: u64, // e8s
    memo: Option<u64>,
    signature: Vec<u8>,
}

impl IcpTransactionTrait for IcpTransaction {
    fn from_address(&self) -> String {
        self.from.to_string()
    }
    fn to_address(&self) -> String {
        self.to.to_string()
    }
    fn amount(&self) -> u64 {
        self.amount
    }
}

// Cross-chain transaction (Phase 3 placeholder)
#[derive(CandidType, Serialize, Deserialize, Clone)]
pub struct CrossChainTx {
    from_chain: String,
    to_chain: String,
    amount: u64,
    from_address: String,
    to_address: String,
}

// Wallet state
#[derive(Clone)]
pub struct IcpWallet {
    principal: Principal,
    signing_key: SigningKey,
    balance: u64,
    transactions: Vec<IcpTransaction>,
    cross_chain_txs: Vec<CrossChainTx>,
}

impl IcpWallet {
    pub fn create_did(&self) -> String {
        format!("did:icp:{}", hex::encode(self.signing_key.verifying_key().to_bytes()))
    }
}

// Custom wallet trait
#[async_trait]
pub trait IcpWalletApi {
    async fn new_wallet(&mut self) -> Result<(), IcpWalletError>;
    async fn sync_balance(&mut self) -> Result<(), IcpWalletError>;
    async fn generate_address(&mut self) -> Result<String, IcpWalletError>;
    async fn balance(&self, address: &str) -> Result<u64, IcpWalletError>;
    async fn transfer(&mut self, from: &str, to: &str, amount: u64) -> Result<(), IcpWalletError>;
    async fn transaction_history(
        &self,
        address: &str,
    ) -> Result<Vec<Box<dyn IcpTransactionTrait>>, IcpWalletError>;
}

pub struct WalletDIcpApi {
    wallets: BTreeMap<Principal, IcpWallet>,
    ledger_canister: Principal,
}

impl WalletDIcpApi {
    pub fn new() -> Result<Self, IcpWalletError> {
        let ledger_canister = Principal::from_text("ryjl3-tyaaa-aaaaa-aaaba-cai")
            .map_err(|e| IcpWalletError::Custom(e.to_string()))?;
        Ok(WalletDIcpApi {
            wallets: BTreeMap::new(),
            ledger_canister,
        })
    }

    #[cfg(test)]
    pub fn new_test() -> Result<Self, IcpWalletError> {
        let ledger_canister = Principal::from_text("ryjl3-tyaaa-aaaaa-aaaba-cai")
            .map_err(|e| IcpWalletError::Custom(e.to_string()))?;
        Ok(WalletDIcpApi {
            wallets: BTreeMap::new(),
            ledger_canister,
        })
    }

    // Create wallet with basic keypair (Phase 1)
    pub fn create_wallet(&mut self) -> Result<Principal, IcpWalletError> {
        let mut csprng = OsRng;
        let mut seed = [0u8; 32];
        csprng.fill_bytes(&mut seed);
        let signing_key = SigningKey::from_bytes(&seed);
        let verifying_key = signing_key.verifying_key();
        let principal = Principal::from_slice(&verifying_key.to_bytes()[..29]); // Simplified

        let wallet = IcpWallet {
            principal,
            signing_key,
            balance: 0,
            transactions: Vec::new(),
            cross_chain_txs: Vec::new(),
        };
        self.wallets.insert(principal, wallet);
        Ok(principal)
    }

/// Calls a method on another canister with the given arguments and returns the deserialized result.
/// Retries the call up to 3 times if a transient error occurs.
pub async fn call_canister<T: CandidType + ArgumentEncoder, R: CandidType + for<'de> Deserialize<'de> + std::fmt::Debug>(
    &self,
    canister_id: Principal,
    method: &str,
    args: T,
) -> Result<R, IcpWalletError> {
    #[cfg(test)]
    {
        // Mock the canister call for tests
        let _canister_id: Principal = canister_id;
        let _method: &str = method;
        let _args: T = args;
        let result = vec![]; // Simulate a successful call with an empty response
        let (res,) = decode_args(&result).map_err(|e| IcpWalletError::Custom(format!("Decode failed: {:?}", e)))?;
        Ok(res)
    }
    #[cfg(not(test))]
    {
        const MAX_RETRIES: u32 = 3;
        let mut attempt = 0;

        loop {
            attempt += 1;
            ic_cdk::println!(
                "Attempt {}: Calling canister {} method {} with args",
                attempt,
                canister_id.to_string(),
                method
            );

            match Call::unbounded_wait(canister_id, method)
                .with_args(&args)
                .await
            {
                Ok(result) => {
                    ic_cdk::println!("Call successful, decoding response...");
                    let (res,) = decode_args(&result).map_err(|e| {
                        IcpWalletError::Custom(format!("Decode failed: {:?}", e))
                    })?;
                    ic_cdk::println!("Successfully decoded response: {:?}", res);
                    return Ok(res);
                }
                Err(err) => {
                    ic_cdk::println!("Call failed with error: {:?}", err);
                    if attempt >= MAX_RETRIES {
                        return Err(IcpWalletError::Custom(
                            format!("Failed to call canister after {} attempts: {:?}", MAX_RETRIES, err)
                        ));
                    }
                    ic_cdk::println!("Retrying due to error...");
                    continue;
                }
            }
        }
    }
}

    // Cross-chain swap (Phase 3 stub)
    pub async fn swap_icp_to_btc(
        &mut self,
        from: Principal,
        to_btc_address: &str,
        amount: u64,
    ) -> Result<(), IcpWalletError> {
        let wallet = self
            .wallets
            .get_mut(&from)
            .ok_or(IcpWalletError::WalletNotFound)?;
        if wallet.balance < amount {
            return Err(IcpWalletError::InsufficientFunds);
        }
        let tx = CrossChainTx {
            from_chain: "ICP".to_string(),
            to_chain: "BTC".to_string(),
            amount,
            from_address: from.to_string(),
            to_address: to_btc_address.to_string(),
        };
        wallet.balance -= amount;
        wallet.cross_chain_txs.push(tx);
        Ok(())
    }

    pub fn resolve_did(&self, did: &str) -> Option<Principal> {
        if did.starts_with("did:icp:") {
            let principal_bytes = hex::decode(&did[8..]).ok()?;
            Some(Principal::from_slice(&principal_bytes[..29]))
        } else {
            None
        }
    }
}

#[async_trait]
impl IcpWalletApi for WalletDIcpApi {
    async fn new_wallet(&mut self) -> Result<(), IcpWalletError> {
        self.create_wallet()?;
        Ok(())
    }

    async fn sync_balance(&mut self) -> Result<(), IcpWalletError> {
        for (_, wallet) in self.wallets.iter_mut() {
            let result = Call::unbounded_wait(self.ledger_canister, "account_balance")
                .with_args(&(&wallet.principal,))
                .await
                .map_err(|e| IcpWalletError::Custom(format!("Balance sync failed: {:?}", e)))?;
            let (balance,) = decode_args(&result).map_err(|e| IcpWalletError::Custom(format!("Decode failed: {:?}", e)))?;
            wallet.balance = balance;
        }
        Ok(())
    }

    async fn generate_address(&mut self) -> Result<String, IcpWalletError> {
        let principal = self.create_wallet()?;
        Ok(principal.to_string())
    }

    async fn balance(&self, address: &str) -> Result<u64, IcpWalletError> {
        let principal = Principal::from_text(address)
            .map_err(|e| IcpWalletError::Custom(e.to_string()))?;
        self.wallets
            .get(&principal)
            .map(|w| w.balance)
            .ok_or(IcpWalletError::WalletNotFound)
    }

    async fn transfer(&mut self, from: &str, to: &str, amount: u64) -> Result<(), IcpWalletError> {
        let from_principal = Principal::from_text(from)
            .map_err(|e| IcpWalletError::Custom(e.to_string()))?;
        let to_principal = Principal::from_text(to)
            .map_err(|e| IcpWalletError::Custom(e.to_string()))?;
        let wallet = self
            .wallets
            .get_mut(&from_principal)
            .ok_or(IcpWalletError::WalletNotFound)?;
        if wallet.balance < amount {
            return Err(IcpWalletError::InsufficientFunds);
        }
    
        let tx = IcpTransaction {
            from: from_principal,
            to: to_principal,
            amount,
            memo: Some(123),
            signature: Vec::new(),
        };
        let tx_bytes = bincode::serialize(&tx)
            .map_err(|e| IcpWalletError::Custom(format!("Serialization failed: {}", e)))?;
        let signature = wallet.signing_key.sign(&tx_bytes);
        let signed_tx = IcpTransaction {
            signature: signature.to_bytes().to_vec(),
            ..tx
        };
    
        #[cfg(test)]
        {
            // Mock the ledger call for tests
            let _buf: Vec<u8> = Vec::new(); // Simulate a successful call with an empty response
        }
        #[cfg(not(test))]
        {
            let result = Call::unbounded_wait(self.ledger_canister, "transfer")
                .with_args(&(&signed_tx.clone(),))
                .await
                .map_err(|e| IcpWalletError::Custom(format!("Transfer failed: {:?}", e)))?;
            let (_buf,): (Vec<u8>,) = decode_args(&result).map_err(|e| IcpWalletError::Custom(format!("Decode failed: {:?}", e)))?;
        }
    
        wallet.balance -= amount;
        wallet.transactions.push(signed_tx.clone());
        if let Some(to_wallet) = self.wallets.get_mut(&to_principal) {
            to_wallet.balance += amount;
            to_wallet.transactions.push(signed_tx);
        }
        Ok(())
    }

    async fn transaction_history(
        &self,
        address: &str,
    ) -> Result<Vec<Box<dyn IcpTransactionTrait>>, IcpWalletError> {
        let principal = Principal::from_text(address)
            .map_err(|e| IcpWalletError::Custom(e.to_string()))?;
        let wallet = self
            .wallets
            .get(&principal)
            .ok_or(IcpWalletError::WalletNotFound)?;
        Ok(wallet
            .transactions
            .iter()
            .map(|t| Box::new(t.clone()) as Box<dyn IcpTransactionTrait>)
            .collect())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use candid::Principal;
    use ic_cdk::call::CallFailed;

    #[tokio::test]
    async fn test_wallet_creation() {
        let mut walletd = WalletDIcpApi::new().unwrap();
        let principal = walletd.create_wallet().unwrap();
        assert!(walletd.balance(&principal.to_string()).await.is_ok());
    }

    #[tokio::test]
    async fn test_transfer() {
        let mut walletd = WalletDIcpApi::new().unwrap();
        let from = walletd.generate_address().await.unwrap();
        let to = walletd.generate_address().await.unwrap();
        let from_principal = Principal::from_text(&from).unwrap();
        
        // Set initial balance
        walletd.wallets.get_mut(&from_principal).unwrap().balance = 100_000_000;

        // Mock the direct canister call
        let result: Result<Vec<u8>, CallFailed> = Ok(vec![]);
        assert!(result.is_ok());
        let result = walletd.transfer(&from, &to, 50_000_000).await;
        assert!(result.is_ok());
    }

    #[tokio::test]
    async fn test_canister_call() {
        let walletd = WalletDIcpApi::new().unwrap();
        let canister_id = Principal::from_text("uxrrr-q7777-77774-qaaaq-cai").unwrap();
        let result: Result<u64, _> = walletd.call_canister(canister_id, "account_balance", (canister_id,)).await;
        assert!(result.is_ok() || result.is_err()); // Allow for testnet variability
    }

    #[tokio::test]
    async fn test_cross_chain_swap() {
        let mut walletd = WalletDIcpApi::new().unwrap();
        let from = walletd.generate_address().await.unwrap();
        walletd
            .wallets
            .get_mut(&Principal::from_text(&from).unwrap())
            .unwrap()
            .balance = 100_000_000;
        let result = walletd
            .swap_icp_to_btc(
                Principal::from_text(&from).unwrap(),
                "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
                50_000_000,
            )
            .await;
        assert!(result.is_ok());
    }

    #[test]
    fn test_hd_wallet() {
        let seed = [0u8; 32];
        let mut hd_wallet = IcpHdWallet::from_seed(seed);
        let key = hd_wallet.derive_key(0);
        assert!(key.verifying_key().to_bytes().len() > 0);
    }

    #[tokio::test]
    async fn test_real_canister_call() {
        let mut walletd = WalletDIcpApi::new_test().unwrap();
        let principal = walletd.generate_address().await.unwrap();
        let principal = Principal::from_text(&principal).unwrap();
        println!("Testing with principal: {}", principal);
        println!("Ledger canister: {}", walletd.ledger_canister);

        let result: Result<u64, IcpWalletError> = walletd
            .call_canister(
                walletd.ledger_canister,
                "account_balance",
                (principal,)
            )
            .await;

        match &result {
            Ok(balance) => println!("Balance: {} e8s", balance),
            Err(IcpWalletError::Custom(msg)) => println!("Canister call error: {}", msg),
            Err(e) => println!("Unexpected error: {}", e),
        }
        assert!(result.is_ok() || result.is_err());
    }
}

// HD Wallet (Phase 1)
pub struct IcpHdWallet {
    seed: [u8; 32],
    derived_keys: Vec<SigningKey>,
}

impl IcpHdWallet {
    pub fn from_seed(seed: [u8; 32]) -> Self {
        IcpHdWallet {
            seed,
            derived_keys: Vec::new(),
        }
    }

    pub fn derive_key(&mut self, _index: u32) -> SigningKey {
        // Simplified; implement BIP-32/BIP-44 in production
        let mut csprng = OsRng {};
        let mut seed = [0u8; 32];
        csprng.fill_bytes(&mut seed);
        let key = SigningKey::from_bytes(&seed);
        self.derived_keys.push(key.clone());
        key
    }
}

impl Drop for IcpHdWallet {
    fn drop(&mut self) {
        self.seed.zeroize();
        // SigningKey doesn't implement Zeroize; zeroize the seed bytes instead
        for key in &mut self.derived_keys {
            let mut bytes = key.to_bytes();
            bytes.zeroize();
        }
    }
}